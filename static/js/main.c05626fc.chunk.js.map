{"version":3,"sources":["MenuToggle.tsx","MenuItem.tsx","Navigation.tsx","Example.tsx","use-dimensions.ts","index.tsx"],"names":["Path","props","react","motion","path","Object","assign","fill","strokeWidth","stroke","strokeLinecap","MenuToggle","_ref","toggle","onClick","width","height","viewBox","MenuToggle_Path","variants","closed","d","open","opacity","transition","duration","y","stiffness","velocity","colors","MenuItem","i","style","border","concat","li","whileHover","scale","whileTap","className","staggerChildren","delayChildren","staggerDirection","Navigation","ul","itemIds","map","MenuItem_MenuItem","key","require","sidebar","arguments","length","undefined","clipPath","type","restDelta","delay","damping","Example","_useCycle","useCycle","_useCycle2","slicedToArray","isOpen","toggleOpen","containerRef","useRef","ref","dimensions","useEffect","current","offsetWidth","offsetHeight","useDimensions","Container","Row","Col","xs","sm","md","lg","autoplay","loop","mode","src","position","left","nav","initial","animate","custom","background","div","Navigation_Navigation","MenuToggle_MenuToggle","App","Example_Example","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c05626fc.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst Path = props => (\n  <motion.path\n    fill=\"transparent\"\n    strokeWidth=\"3\"\n    stroke=\"hsl(0, 0%, 18%)\"\n    strokeLinecap=\"round\"\n    {...props}\n  />\n);\n\nexport const MenuToggle = ({ toggle }) => (\n  <button onClick={toggle}>\n    <svg width=\"23\" height=\"23\" viewBox=\"0 0 23 23\">\n      <Path\n        variants={{\n          closed: { d: \"M 2 2.5 L 20 2.5\" },\n          open: { d: \"M 3 16.5 L 17 2.5\" }\n        }}\n      />\n      <Path\n        d=\"M 2 9.423 L 20 9.423\"\n        variants={{\n          closed: { opacity: 1 },\n          open: { opacity: 0 }\n        }}\n        transition={{ duration: 0.1 }}\n      />\n      <Path\n        variants={{\n          closed: { d: \"M 2 16.346 L 20 16.346\" },\n          open: { d: \"M 3 2.5 L 17 16.346\" }\n        }}\n      />\n    </svg>\n  </button>\n);\n","import * as React from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst variants = {\n  open: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      y: { stiffness: 1000, velocity: -100 }\n    }\n  },\n  closed: {\n    y: 50,\n    opacity: 0,\n    transition: {\n      y: { stiffness: 1000 }\n    }\n  }\n};\n\nconst colors = [\"#FF008C\", \"#D309E1\", \"#9C1AFF\", \"#7700FF\", \"#4400FF\"];\n\nexport const MenuItem = ({ i }) => {\n  const style = { border: `2px solid ${colors[i]}` };\n  return (\n    <div>\n    <motion.li\n      variants={variants}\n      whileHover={{ scale: 1.1 }}\n      whileTap={{ scale: 0.95 }}\n    >\n      <div className=\"icon-placeholder\" style={style} />\n      <div className=\"text-placeholder\" style={style} > test 1 </div>\n    </motion.li>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { MenuItem } from \"./MenuItem\";\n\nconst variants = {\n  open: {\n    transition: { staggerChildren: 0.07, delayChildren: 0.2 }\n  },\n  closed: {\n    transition: { staggerChildren: 0.05, staggerDirection: -1 }\n  }\n};\n\nexport const Navigation = () => (\n  <motion.ul variants={variants}>\n    {itemIds.map(i => (\n      <MenuItem i={i} key={i} />\n    ))}\n  </motion.ul>\n);\n\nconst itemIds = [0, 1, 2, 3, 4];\n","import * as React from \"react\";\nimport { useRef } from \"react\";\nimport { motion, useCycle } from \"framer-motion\";\nimport { useDimensions } from \"./use-dimensions\";\nimport { MenuToggle } from \"./MenuToggle\";\nimport { Navigation } from \"./Navigation\";\nrequire(\"@lottiefiles/lottie-player\");\nimport Bootstrap from 'bootstrap';\nimport {\n  Container,\n  Navbar,\n  Nav,\n  Row,\n  Col\n  // Form,\n  // FormControl,\n  // Button\n} from \"react-bootstrap\";\n\nconst sidebar = {\n  open: (height = 1000) => ({\n    clipPath: `circle(${height * 2 + 200}px at 40px 40px)`,\n    transition: {\n      type: \"spring\",\n      stiffness: 20,\n      restDelta: 2\n    }\n  }),\n  closed: {\n    clipPath: \"circle(30px at 40px 40px)\",\n    transition: {\n      delay: 0.5,\n      type: \"spring\",\n      stiffness: 400,\n      damping: 40\n    }\n  }\n};\n\nexport const Example = () => {\n  const [isOpen, toggleOpen] = useCycle(false, true);\n  const containerRef = useRef(null);\n  const { height } = useDimensions(containerRef);\n\n  const navBarStyles = {\n    backgroundColor: \"#fff\",\n    backgroundImage: \"linear-gradient(0deg, #D2D2D2 0%, #97D9E1 100%);\",\n    boxShadow: \"0 0 6px 0 rgba(0, 0, 0, 0.3)\"\n  };\n\n  return (\n    <div>\n      <Container>\n        <Row>\n          <Col xs={2} sm={2} md={6} lg={6}>\n            <lottie-player\n              autoplay\n              loop\n              mode=\"normal\"\n              src=\"https://assets4.lottiefiles.com/packages/lf20_gssu2dkm.json\"\n              style={{width: \"100%\", position: \"relative\", left: \"10%\"}}\n            >\n            </lottie-player>\n          </Col>\n        <Col sm={4} md={3} lg={3}>\n        <motion.nav\n          initial={false}\n          animate={isOpen ? \"open\" : \"closed\"}\n          custom={height}\n          ref={containerRef}\n          style={{background: \"#FFFF99\", width: \"30vw\"}}\n        >\n          <motion.div className=\"background\" style={{background: \"lightpink\", width: \"75vw\"}} variants={sidebar} />\n          <Navigation />\n          <MenuToggle toggle={() => toggleOpen()} />\n        </motion.nav>\n        </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n","import { useEffect, useRef } from \"react\";\n\n// Naive implementation - in reality would want to attach\n// a window or resize listener. Also use state/layoutEffect instead of ref/effect\n// if this is important to know on initial client render.\n// It would be safer to  return null for unmeasured states.\nexport const useDimensions = ref => {\n  const dimensions = useRef({ width: 0, height: 0 });\n\n  useEffect(() => {\n    dimensions.current.width = ref.current.offsetWidth;\n    dimensions.current.height = ref.current.offsetHeight;\n  }, []);\n\n  return dimensions.current;\n};\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { Example } from \"./Example\";\n\nimport \"./styles.css\";\n\nconst App = () => <Example />;\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}